import os
import sys
import subprocess
import time
import pandas as pd
import numpy as np


class LiDARWrapper:
    def __init__(self, unity_exe_path, output_csv="/Users/ayaan/coding/ASU-Summer-Internship-LiDAR-Prioject/Unity Project/Virtual Camera/Virtual Sensor/outputFile.csv"):
        self.unity_exe = unity_exe_path
        self.output_csv = output_csv
        self.scan_data = None
    
    def run_unity_scan(self, timeout=300):
        """Launch Unity and wait for scan to complete"""
        if not os.path.exists(self.unity_exe):
            print(f"Error: Unity executable not found at {self.unity_exe}")
            return False
        
        print("Starting Unity LiDAR scan")
        
        try:
            # Launch Unity in batch mode
            process = subprocess.run([
                self.unity_exe,
                "-batchmode",
                "-quit",
                "-nographics"
            ], timeout=timeout, capture_output=True, text=True)
            
            if process.returncode == 0:
                print("Unity scan successful")
                return True
            else:
                print(f"Unity scan failed. Code: {process.returncode}")
                if process.stderr:
                    print(f"Error: {process.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"Unity scan timed out after {timeout} seconds")
            return False
        except Exception as e:
            print(f"Error running Unity: {e}")
            return False
    
    def load_data(self):
        """Load the CSV data generated by Unity"""
        if not os.path.exists(self.output_csv):
            print(f"Error: Output file {self.output_csv} not found")
            return False
        
        try:
            self.scan_data = pd.read_csv(self.output_csv)
            print(f"Loaded {len(self.scan_data)} scan points")
            return True
        except Exception as e:
            print(f"Error loading data: {e}")
            return False
    
    def to_cartesian(self):
        """Convert spherical coordinates to Cartesian (x, y, z)"""
        if self.scan_data is None:
            print("No data loaded")
            return None
        
        theta = self.scan_data['theta'].values
        phi = self.scan_data['phi'].values
        distance = self.scan_data['distance'].values
        
        # Convert to Cartesian coordinates
        x = distance * np.cos(theta) * np.sin(phi)
        y = distance * np.cos(phi)
        z = distance * np.sin(theta) * np.sin(phi)
        
        return np.column_stack((x, y, z))
    
    def save_point_cloud(self, filename="point_cloud.xyz"):
        """Save point cloud as XYZ file"""
        points = self.to_cartesian()
        if points is None:
            return False
        
        try:
            np.savetxt(filename, points, fmt='%.6f')
            print(f"Point cloud saved to {filename}")
            return True
        except Exception as e:
            print(f"Error saving point cloud: {e}")
            return False
    
    def get_stats(self):
        """Print basic statistics about the scan"""
        if self.scan_data is None:
            print("No data loaded")
            return
        
        print(f"\nScan Statistics:")
        print(f"Total points: {len(self.scan_data)}")
        print(f"Distance range: {self.scan_data['distance'].min():.2f} - {self.scan_data['distance'].max():.2f}")
        print(f"Zero distance points: {len(self.scan_data[self.scan_data['distance'] == 0])}")
    
    def run_full_pipeline(self, timeout=300):
        """run complete scan and processing"""
        print("Starting LiDAR Pipeline")
        
        # Run Unity scan
        if not self.run_unity_scan(timeout):
            return False
        
        # Load data
        if not self.load_data():
            return False
        
        # Show stats
        self.get_stats()
        
        # Save point cloud
        self.save_point_cloud()
        
        print("Pipeline Complete")
        return True


def main():
    if len(sys.argv) < 3:
        print("Usage: python basic_lidar_wrapper.py <unity_executable_path> <output_csv_path>")
        print("Example: python basic_lidar_wrapper.py '/Applications/Unity/Hub/Editor/6000.1.5f1/Unity.app/Contents/MacOS/Unity' '/path/to/output.csv'")
        sys.exit(1)
    
    unity_exe = sys.argv[1]
    output_csv = sys.argv[2]
    wrapper = LiDARWrapper(unity_exe, output_csv)
    
    success = wrapper.run_full_pipeline()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()